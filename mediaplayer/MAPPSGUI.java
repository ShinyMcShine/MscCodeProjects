/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mediaplayer;

import java.awt.Image;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author 100219034
 */
public class MAPPSGUI extends javax.swing.JFrame {

    private AlbumCollection album_col;
    private Playlist playlist;
    private PlaylistTrack playlisttrack;
    private String albumSelectedFromCollection;
    private MP3 mp3;
    //DefaultListModel plylistListModel;

    /**
     * Creates new form MAPPSGUI
     */
    public MAPPSGUI() {
        album_col = new AlbumCollection();
        playlist = new Playlist(album_col);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MAPPSMP3PlayerLabel = new javax.swing.JLabel();
        MusicPlayPanel = new javax.swing.JPanel();
        PlayButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        ArtistLabel = new javax.swing.JLabel();
        AlbumLabel = new javax.swing.JLabel();
        TrackLabel = new javax.swing.JLabel();
        DurationLabel = new javax.swing.JLabel();
        AlbumCollectionButton = new javax.swing.JButton();
        LoadPlaylistButton = new javax.swing.JButton();
        MusicPlaylistEditorJPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        PlaylistJList = new javax.swing.JList<>();
        PlaylistDurationLabel = new javax.swing.JLabel();
        PlyTotalLabel = new javax.swing.JLabel();
        MusicPlaylistLabel = new javax.swing.JLabel();
        PlaylistNameLabel = new javax.swing.JLabel();
        PlaylistLabel = new javax.swing.JLabel();
        MusicCollectionJPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Album_Col_JList = new javax.swing.JList<>();
        ClearCollectionButton = new javax.swing.JButton();
        MusicCollectionLabel = new javax.swing.JLabel();
        AlbumTrackListJPanel = new javax.swing.JPanel();
        AlbumTrackListLabel = new javax.swing.JLabel();
        AlbumDurationLabel = new javax.swing.JLabel();
        AlbumDurationDisplay = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Album_Track_JList = new javax.swing.JList<>();
        LongestTrackLabel = new javax.swing.JLabel();
        NumTracksLabel = new javax.swing.JLabel();
        LongestTrackOutput = new javax.swing.JLabel();
        TotalTrackOutputLabel = new javax.swing.JLabel();
        PlaylistButtonsJPanel = new javax.swing.JPanel();
        RemovePlaylistButton = new javax.swing.JButton();
        AddPlaylistButton = new javax.swing.JButton();
        ClearPlaylistButton = new javax.swing.JButton();
        SavePlaylistButton = new javax.swing.JButton();
        AlbumImageJPanel = new javax.swing.JPanel();
        AlbumCoverLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MAPPS MP3 Player");

        MAPPSMP3PlayerLabel.setFont(new java.awt.Font("Trebuchet MS", 3, 18)); // NOI18N
        MAPPSMP3PlayerLabel.setText("             MAPPS MP3 Player");
        MAPPSMP3PlayerLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MAPPSMP3PlayerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        MusicPlayPanel.setBackground(new java.awt.Color(51, 51, 51));
        MusicPlayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        PlayButton.setBackground(java.awt.SystemColor.activeCaption);
        PlayButton.setText("Play");
        PlayButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PlayButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayButtonActionPerformed(evt);
            }
        });

        StopButton.setBackground(java.awt.SystemColor.activeCaption);
        StopButton.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        StopButton.setText("Stop");
        StopButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        ArtistLabel.setForeground(new java.awt.Color(0, 255, 0));
        ArtistLabel.setText("Artist");

        AlbumLabel.setForeground(new java.awt.Color(51, 255, 0));
        AlbumLabel.setText("Album");

        TrackLabel.setForeground(new java.awt.Color(51, 255, 0));
        TrackLabel.setText("Track");

        DurationLabel.setForeground(new java.awt.Color(0, 255, 51));
        DurationLabel.setText("Duration");

        javax.swing.GroupLayout MusicPlayPanelLayout = new javax.swing.GroupLayout(MusicPlayPanel);
        MusicPlayPanel.setLayout(MusicPlayPanelLayout);
        MusicPlayPanelLayout.setHorizontalGroup(
            MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicPlayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArtistLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MusicPlayPanelLayout.createSequentialGroup()
                        .addComponent(AlbumLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24))
                    .addComponent(PlayButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MusicPlayPanelLayout.createSequentialGroup()
                        .addComponent(TrackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(177, 177, 177))
                    .addGroup(MusicPlayPanelLayout.createSequentialGroup()
                        .addComponent(DurationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(162, 162, 162))
                    .addGroup(MusicPlayPanelLayout.createSequentialGroup()
                        .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        MusicPlayPanelLayout.setVerticalGroup(
            MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MusicPlayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArtistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DurationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlbumLabel)
                    .addComponent(TrackLabel))
                .addGap(22, 22, 22)
                .addGroup(MusicPlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlayButton)
                    .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        AlbumCollectionButton.setBackground(java.awt.SystemColor.activeCaption);
        AlbumCollectionButton.setFont(new java.awt.Font("Trebuchet MS", 2, 15)); // NOI18N
        AlbumCollectionButton.setText("Load Album Collection");
        AlbumCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlbumCollectionButtonActionPerformed(evt);
            }
        });

        LoadPlaylistButton.setBackground(java.awt.SystemColor.activeCaption);
        LoadPlaylistButton.setFont(new java.awt.Font("Trebuchet MS", 2, 15)); // NOI18N
        LoadPlaylistButton.setText("Load Playlist");
        LoadPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadPlaylistButtonActionPerformed(evt);
            }
        });

        PlaylistJList.setBackground(new java.awt.Color(102, 102, 102));
        PlaylistJList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PlaylistJList.setForeground(new java.awt.Color(0, 255, 255));
        jScrollPane3.setViewportView(PlaylistJList);

        PlaylistDurationLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        PlaylistDurationLabel.setForeground(new java.awt.Color(0, 102, 102));
        PlaylistDurationLabel.setText("Playlist Duration:");

        PlyTotalLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        PlyTotalLabel.setForeground(new java.awt.Color(0, 102, 102));

        MusicPlaylistLabel.setFont(new java.awt.Font("Trebuchet MS", 2, 18)); // NOI18N
        MusicPlaylistLabel.setForeground(new java.awt.Color(0, 51, 153));
        MusicPlaylistLabel.setText("  Music Player/Playlist Editior");

        PlaylistNameLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        PlaylistNameLabel.setForeground(new java.awt.Color(0, 102, 102));

        PlaylistLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        PlaylistLabel.setForeground(new java.awt.Color(0, 102, 102));
        PlaylistLabel.setText("Playlist Name:");

        javax.swing.GroupLayout MusicPlaylistEditorJPanelLayout = new javax.swing.GroupLayout(MusicPlaylistEditorJPanel);
        MusicPlaylistEditorJPanel.setLayout(MusicPlaylistEditorJPanelLayout);
        MusicPlaylistEditorJPanelLayout.setHorizontalGroup(
            MusicPlaylistEditorJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicPlaylistEditorJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MusicPlaylistEditorJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(MusicPlaylistEditorJPanelLayout.createSequentialGroup()
                        .addComponent(PlaylistLabel)
                        .addGap(17, 17, 17)
                        .addComponent(PlaylistNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PlaylistDurationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlyTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(MusicPlaylistEditorJPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(MusicPlaylistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MusicPlaylistEditorJPanelLayout.setVerticalGroup(
            MusicPlaylistEditorJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MusicPlaylistEditorJPanelLayout.createSequentialGroup()
                .addComponent(MusicPlaylistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(MusicPlaylistEditorJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlaylistDurationLabel)
                    .addComponent(PlyTotalLabel)
                    .addComponent(PlaylistNameLabel)
                    .addComponent(PlaylistLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        Album_Col_JList.setBackground(new java.awt.Color(102, 102, 102));
        Album_Col_JList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Album_Col_JList.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        Album_Col_JList.setForeground(new java.awt.Color(51, 255, 255));
        Album_Col_JList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Album_Col_JListMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(Album_Col_JList);

        ClearCollectionButton.setBackground(java.awt.SystemColor.activeCaption);
        ClearCollectionButton.setText("Clear Collection");
        ClearCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearCollectionButtonActionPerformed(evt);
            }
        });

        MusicCollectionLabel.setFont(new java.awt.Font("Trebuchet MS", 2, 19)); // NOI18N
        MusicCollectionLabel.setText("Music Collection");

        javax.swing.GroupLayout MusicCollectionJPanelLayout = new javax.swing.GroupLayout(MusicCollectionJPanel);
        MusicCollectionJPanel.setLayout(MusicCollectionJPanelLayout);
        MusicCollectionJPanelLayout.setHorizontalGroup(
            MusicCollectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicCollectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MusicCollectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(MusicCollectionJPanelLayout.createSequentialGroup()
                        .addComponent(MusicCollectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClearCollectionButton)))
                .addContainerGap())
        );
        MusicCollectionJPanelLayout.setVerticalGroup(
            MusicCollectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicCollectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MusicCollectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MusicCollectionLabel)
                    .addComponent(ClearCollectionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5)
                .addContainerGap())
        );

        AlbumTrackListLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        AlbumTrackListLabel.setForeground(new java.awt.Color(0, 102, 102));
        AlbumTrackListLabel.setText("Album Track List");

        AlbumDurationLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        AlbumDurationLabel.setForeground(new java.awt.Color(0, 102, 102));
        AlbumDurationLabel.setText("Album Duratoin:");
        AlbumDurationLabel.setAutoscrolls(true);

        AlbumDurationDisplay.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        AlbumDurationDisplay.setForeground(new java.awt.Color(0, 102, 102));
        AlbumDurationDisplay.setToolTipText("");

        Album_Track_JList.setBackground(java.awt.SystemColor.activeCaption);
        Album_Track_JList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(Album_Track_JList);

        LongestTrackLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        LongestTrackLabel.setForeground(new java.awt.Color(0, 102, 102));
        LongestTrackLabel.setText("Longest Track:");

        NumTracksLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        NumTracksLabel.setForeground(new java.awt.Color(0, 102, 102));
        NumTracksLabel.setText("Numer of Tracks:");

        LongestTrackOutput.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        LongestTrackOutput.setForeground(new java.awt.Color(0, 102, 102));

        TotalTrackOutputLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        TotalTrackOutputLabel.setForeground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout AlbumTrackListJPanelLayout = new javax.swing.GroupLayout(AlbumTrackListJPanel);
        AlbumTrackListJPanel.setLayout(AlbumTrackListJPanelLayout);
        AlbumTrackListJPanelLayout.setHorizontalGroup(
            AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AlbumTrackListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                                .addComponent(AlbumDurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(AlbumDurationDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37))
                    .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                        .addGroup(AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                                .addComponent(LongestTrackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LongestTrackOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                                .addComponent(NumTracksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TotalTrackOutputLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        AlbumTrackListJPanelLayout.setVerticalGroup(
            AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumTrackListJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AlbumTrackListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlbumDurationLabel)
                    .addComponent(AlbumDurationDisplay))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LongestTrackLabel)
                    .addComponent(LongestTrackOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AlbumTrackListJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumTracksLabel)
                    .addComponent(TotalTrackOutputLabel)))
        );

        RemovePlaylistButton.setBackground(java.awt.SystemColor.inactiveCaption);
        RemovePlaylistButton.setText("Remove from Playlist Editor");
        RemovePlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovePlaylistButtonActionPerformed(evt);
            }
        });

        AddPlaylistButton.setBackground(java.awt.SystemColor.inactiveCaption);
        AddPlaylistButton.setText("Add to Playlist Editor");
        AddPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPlaylistButtonActionPerformed(evt);
            }
        });

        ClearPlaylistButton.setBackground(java.awt.SystemColor.inactiveCaption);
        ClearPlaylistButton.setText("Clear Playlist Editor");
        ClearPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearPlaylistButtonActionPerformed(evt);
            }
        });

        SavePlaylistButton.setBackground(java.awt.SystemColor.inactiveCaption);
        SavePlaylistButton.setText("Save Playlist");
        SavePlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavePlaylistButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PlaylistButtonsJPanelLayout = new javax.swing.GroupLayout(PlaylistButtonsJPanel);
        PlaylistButtonsJPanel.setLayout(PlaylistButtonsJPanelLayout);
        PlaylistButtonsJPanelLayout.setHorizontalGroup(
            PlaylistButtonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlaylistButtonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlaylistButtonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RemovePlaylistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SavePlaylistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddPlaylistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClearPlaylistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PlaylistButtonsJPanelLayout.setVerticalGroup(
            PlaylistButtonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlaylistButtonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemovePlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SavePlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ClearPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        AlbumCoverLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AlbumCoverLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout AlbumImageJPanelLayout = new javax.swing.GroupLayout(AlbumImageJPanel);
        AlbumImageJPanel.setLayout(AlbumImageJPanelLayout);
        AlbumImageJPanelLayout.setHorizontalGroup(
            AlbumImageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumImageJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AlbumCoverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        AlbumImageJPanelLayout.setVerticalGroup(
            AlbumImageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumImageJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AlbumCoverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MusicCollectionJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(AlbumCollectionButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LoadPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AlbumTrackListJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlaylistButtonsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(56, 56, 56)
                        .addComponent(MusicPlaylistEditorJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(59, 59, 59))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MusicPlayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MAPPSMP3PlayerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(155, 155, 155)
                        .addComponent(AlbumImageJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(MusicPlaylistEditorJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AlbumImageJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(LoadPlaylistButton)
                                    .addComponent(AlbumCollectionButton))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(PlaylistButtonsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(AlbumTrackListJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(MAPPSMP3PlayerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(253, 253, 253)
                                .addComponent(MusicCollectionJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MusicPlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(75, 75, 75))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        mp3.Stop();
        mp3.Close();
    }//GEN-LAST:event_StopButtonActionPerformed

    private void AlbumCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlbumCollectionButtonActionPerformed
        JFileChooser j = new JFileChooser();

        j.setCurrentDirectory(new File("C:\\"));
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file", "txt");
        j.setFileFilter(filter);

        int fileSelect = j.showOpenDialog(null);
        //String load_file = null;
        if (fileSelect == j.APPROVE_OPTION) {
            //System.out.println("CurrentDirectory====" + j.getCurrentDirectory()+ "\\" + j.getSelectedFile().getName());
            File file = new File(j.getCurrentDirectory() + "\\" + j.getSelectedFile().getName());
            //System.getProperty("user.dir")
            try {

                album_col.load_albums(file.getAbsolutePath());
                album_col.SortAlbum();

                Album_Col_JList.setModel(album_col.getListModelAlbumcol());

            } catch (Exception ex) {
                Logger.getLogger(MAPPSGUI.class.getName()).log(Level.SEVERE, null, ex);

            }

        }

    }//GEN-LAST:event_AlbumCollectionButtonActionPerformed

    private void LoadPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadPlaylistButtonActionPerformed
        JFileChooser j = new JFileChooser();

        j.setCurrentDirectory(new File("C:\\"));
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file", "txt");
        j.setFileFilter(filter);

        int fileSelect = j.showOpenDialog(null);
        //String load_file = null;
        if (fileSelect == j.APPROVE_OPTION) {
            File file = new File(j.getCurrentDirectory() + "\\" + j.getSelectedFile().getName());
            try {
                playlist.load_playlist(file.getAbsolutePath());
            } catch (Exception ex) {
                Logger.getLogger(MAPPSGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "A album colletion has not been loaded!!!"
                        + "\n" + "Please load one first before trying again.");

            }

            PlaylistJList.setModel(playlist.getListModelPlaylist());
            PlyTotalLabel.setText(playlist.getPlaylistDur().toString());
            PlaylistNameLabel.setText(j.getSelectedFile().getName().replace(".txt", ""));

        }
    }//GEN-LAST:event_LoadPlaylistButtonActionPerformed

    private void Album_Col_JListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Album_Col_JListMouseClicked
        String alb;
        alb = Album_Col_JList.getSelectedValue();
        albumSelectedFromCollection = alb;
        File file = new File(System.getProperty("user.dir") + "/AlbumImages/");
        String[] ImageList;
        ImageList = file.list();
        Album album = album_col.getAlbByHeader(alb);

        for (String name : ImageList) {
            String[] parts = name.split("_");
            String artist = parts[0];
            String title = parts[1].replace(".jpg", "");

            if (album.getArtist().replace("'", "").equalsIgnoreCase(artist) && album.getTitle().replaceAll("[^a-zA-Z]+", "").equalsIgnoreCase(title)) {
                getImage(artist + "_" + title);
            }
            //This if is for having a & and space in their name and the image does not
            if (album.getArtist().replace("&", "").replace(" ", "").equalsIgnoreCase(artist) && album.getTitle().replaceAll("[^a-zA-Z]+", "").equalsIgnoreCase(title)) {
                getImage(artist + "_" + title);
            }

        }
        LongestTrackOutput.setText(album.getLongest().toString());
        AlbumDurationDisplay.setText(album.totalAlbumDuration().toString());
        Album_Track_JList.setModel(album.getListModelAlbum());
        TotalTrackOutputLabel.setText(" (" + album.getCount() + ")");
    }//GEN-LAST:event_Album_Col_JListMouseClicked

    private void RemovePlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePlaylistButtonActionPerformed
        int x = PlaylistJList.getSelectedIndex();
        playlisttrack = PlaylistTrackFormat(PlaylistJList.getSelectedValue());
        playlist.removePlaylistTrack(x);
        playlist.removePlaylistFromListModel(playlisttrack);
        PlaylistJList.setModel(playlist.getListModelPlaylist());
    }//GEN-LAST:event_RemovePlaylistButtonActionPerformed

    private PlaylistTrack PlaylistTrackFormat(String playlistName) {
        String[] parts = playlistName.split("_");
        String line2 = parts[1];
        if (line2.contains(") (")) {
            String[] subparts = line2.split("\\) \\(");
            String track = subparts[0] + ")";//the split removes the ) so it needs to be added again
            //System.out.println("If Track output: " + track);
            String alb = subparts[1].replace(")", "");
            //System.out.println("If Alb output: " + alb);
            Duration dur = new Duration(parts[0]);
            Album album = album_col.getAlbByHeader(alb);
            PlaylistTrack playlisttrack = new PlaylistTrack(dur, track, album);
            return playlisttrack;
        }
        Duration dur = new Duration(parts[0]);
        String list = parts[1];
        String[] trackAlbum = list.split(" \\(", 2);

        String track = trackAlbum[0];
        String alb = trackAlbum[1].replace(")", "");
        //System.out.println(" Alb output: " + alb);
        Album album = album_col.getAlbByHeader(alb);
        PlaylistTrack playlisttrack = new PlaylistTrack(dur, track, album);

        return playlisttrack;
    }

    private void ClearCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearCollectionButtonActionPerformed
        if (evt.getSource() == ClearCollectionButton) {
            DefaultListModel collectModel = (DefaultListModel) Album_Col_JList.getModel();
            String alb;
            alb = Album_Col_JList.getSelectedValue();
            albumSelectedFromCollection = alb;
            Album album = album_col.getAlbByHeader(alb);
            collectModel.removeAllElements();
            album_col.clearAlbumCollection();
            Album_Track_JList.setModel(album.clearAlbumTrackList());
            LongestTrackOutput.setText("");
            TotalTrackOutputLabel.setText("");
        }
    }//GEN-LAST:event_ClearCollectionButtonActionPerformed

    private void ClearPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearPlaylistButtonActionPerformed
        if (evt.getSource() == ClearPlaylistButton) {
            DefaultListModel listModel = (DefaultListModel) PlaylistJList.getModel();
            listModel.removeAllElements();
            playlist.clearPlaylistCollection();
            PlaylistNameLabel.setText("");
            PlyTotalLabel.setText("");
        }
    }//GEN-LAST:event_ClearPlaylistButtonActionPerformed

    private void AddPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPlaylistButtonActionPerformed
        String trackadd = Album_Track_JList.getSelectedValue();
//         
//        System.out.println(albumSelectedFromCollection);
//        System.out.println(trackadd);
        String[] parts = trackadd.split(" - ");
        String dur = parts[0];
        String track = parts[1];
        Duration duration = new Duration(dur);
        Album alb = album_col.getAlbByHeader(albumSelectedFromCollection);
        playlisttrack = new PlaylistTrack(duration, track, alb);
        playlist.addPlaylistToListModel(playlisttrack);
        //System.out.println("PlayTrack object" + playlisttrack);
        //System.out.println("PlayTrack getAlbumofTrack " + playlisttrack.getAlbumofTrack());
        //plylistListModel.addElement(playlist.getListModelPlaylist());
        //System.out.println("Playlist Add to List model function "+playlist.addPlaylistToListModel(playlisttrack));

        PlaylistJList.setModel(playlist.getListModelPlaylist());
        //System.out.println("In Jlist " + PlaylistJList.getModel());
    }//GEN-LAST:event_AddPlaylistButtonActionPerformed

    private void SavePlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavePlaylistButtonActionPerformed
        JFileChooser j = new JFileChooser();
        j.setCurrentDirectory(new File("C:\\"));
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file", "txt");
        j.setFileFilter(filter);
        int fileSelect = j.showSaveDialog(null);
        String fileExistCheck = "";
        File file = new File(j.getCurrentDirectory().toString() + "\\");

        String[] fileList;
        fileList = file.list();
        if (fileSelect == j.APPROVE_OPTION) {
            FileWriter fw = null;
            try {

                fw = new FileWriter(j.getCurrentDirectory() + "\\" + j.getSelectedFile().getName() + ".txt");

                for (String name : fileList) {

                    if (name.equalsIgnoreCase(j.getSelectedFile().getName() + ".txt") || name.equalsIgnoreCase(j.getSelectedFile().getName())) {
                        fileExistCheck = name;

                        int answer = JOptionPane.showConfirmDialog(null,
                                "This File " + fileExistCheck + " exists Are you sure you want to overwrite it?",
                                "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (answer != JOptionPane.YES_OPTION) {
                            return;
                        }
                    }

                }
                // System.out.println("Name of file to save: " + fileExistCheck + " File does match and new existing files. " + j.getSelectedFile());
            } catch (IOException ex) {
                Logger.getLogger(MAPPSGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (int i = 0; i < PlaylistJList.getModel().getSize(); i++) {
                String item = (String) PlaylistJList.getModel().getElementAt(i);
                playlisttrack = PlaylistTrackFormat(item);

                try {
                    fw.write(playlisttrack.toString() + "\n");

                } catch (IOException ex) {
                    Logger.getLogger(MAPPSGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            try {
                fw.flush();
            } catch (IOException ex) {
                Logger.getLogger(MAPPSGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SavePlaylistButtonActionPerformed

    private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayButtonActionPerformed
        String playsong = PlaylistJList.getSelectedValue();
        playlisttrack = PlaylistTrackFormat(playsong);
        //These String are to build the album items used to check against the
        // list of mp3 files.
        String track = playlisttrack.getTrack();//.replaceAll("[^a-zA-Z]+", "");
        String duration = playlisttrack.getDuration().toString();
        String artist = playlisttrack.getAlbumofTrack().getArtist();
        String album = playlisttrack.getAlbumofTrack().getTitle();
        //

        File file = new File(System.getProperty("user.dir") + "/Music/");
        String[] musicList;
        musicList = file.list();
        String songToPlay = "";

        for (String song : musicList) {
            String[] parts = song.split("_-_", 5);
            String artistPlay = parts[0].replaceAll("[^a-zA-Z]+", "");
            String trackPlay = parts[2].replaceAll("_", "").replace(".mp3", "");
            if (artistPlay.equalsIgnoreCase(artist.replaceAll("[^a-zA-Z]+", "")) && trackPlay.equalsIgnoreCase(track.replaceAll(" ", ""))) {
                songToPlay = file + "\\" + song;

            }
        }
        mp3 = new MP3(songToPlay);

        mp3.play();
        ArtistLabel.setText(artist);
        AlbumLabel.setText(album);
        DurationLabel.setText(duration);
        TrackLabel.setText(track);
    }//GEN-LAST:event_PlayButtonActionPerformed

    private void getImage(String name) {

        String AlbumImagesFolder = System.getProperty("user.dir");
        String imageName = AlbumImagesFolder + "/AlbumImages/" + name + ".jpg";
        ImageIcon album_cover = new ImageIcon(imageName);
        Image image = album_cover.getImage().getScaledInstance(240, 240, Image.SCALE_AREA_AVERAGING);
        if (album_cover.getIconHeight() != -1) {
            AlbumCoverLabel.setIcon(new ImageIcon(image));
        } else {
            AlbumCoverLabel.setText("Image not found");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MAPPSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MAPPSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MAPPSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MAPPSGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MAPPSGUI().setVisible(true);

            }
        });

        // This block of code was used to test how the file object works and .list() method
//        File f = null;
//        String[] paths;
//        try{
//           f = new File("F:\\KDD\\Application Programming\\Coursework 2\\Music Album and Playlist Playing System\\AlbumImages");
//           paths = f.list();
//           for (String path:paths){
//               System.out.println(path);
//        }
//        }catch(Exception e){
//            e.printStackTrace();
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddPlaylistButton;
    private javax.swing.JButton AlbumCollectionButton;
    private javax.swing.JLabel AlbumCoverLabel;
    private javax.swing.JLabel AlbumDurationDisplay;
    private javax.swing.JLabel AlbumDurationLabel;
    private javax.swing.JPanel AlbumImageJPanel;
    private javax.swing.JLabel AlbumLabel;
    private javax.swing.JPanel AlbumTrackListJPanel;
    private javax.swing.JLabel AlbumTrackListLabel;
    private javax.swing.JList<String> Album_Col_JList;
    private javax.swing.JList<String> Album_Track_JList;
    private javax.swing.JLabel ArtistLabel;
    private javax.swing.JButton ClearCollectionButton;
    private javax.swing.JButton ClearPlaylistButton;
    private javax.swing.JLabel DurationLabel;
    private javax.swing.JButton LoadPlaylistButton;
    private javax.swing.JLabel LongestTrackLabel;
    private javax.swing.JLabel LongestTrackOutput;
    private javax.swing.JLabel MAPPSMP3PlayerLabel;
    private javax.swing.JPanel MusicCollectionJPanel;
    private javax.swing.JLabel MusicCollectionLabel;
    private javax.swing.JPanel MusicPlayPanel;
    private javax.swing.JPanel MusicPlaylistEditorJPanel;
    private javax.swing.JLabel MusicPlaylistLabel;
    private javax.swing.JLabel NumTracksLabel;
    private javax.swing.JButton PlayButton;
    private javax.swing.JPanel PlaylistButtonsJPanel;
    private javax.swing.JLabel PlaylistDurationLabel;
    private javax.swing.JList<String> PlaylistJList;
    private javax.swing.JLabel PlaylistLabel;
    private javax.swing.JLabel PlaylistNameLabel;
    private javax.swing.JLabel PlyTotalLabel;
    private javax.swing.JButton RemovePlaylistButton;
    private javax.swing.JButton SavePlaylistButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JLabel TotalTrackOutputLabel;
    private javax.swing.JLabel TrackLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables
}
